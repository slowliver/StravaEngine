<?xml version="1.0" encoding="utf-8"?>
<!-- .targets は各ファイルのビルド方法を記述ファイル -->
<!-- https://learn.microsoft.com/ja-jp/visualstudio/msbuild/msbuild-dot-targets-files -->
<!-- https://learn.microsoft.com/ja-jp/visualstudio/msbuild/msbuild-project-file-schema-reference -->
<!-- MSBuild には、項目、プロパティ、ターゲット、および一般的なシナリオ用のタスクが含まれているいくつかの .targets ファイルが含まれます。 -->
<!-- これらのファイルは、保守を簡素化し読みやすくするために、ほとんどの Visual Studio プロジェクト ファイルに自動的にインポートされます。 -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<ItemGroup>
		<PropertyPageSchema Include="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml" />
		<AvailableItemName Include="ShaderBuilder">
			<Targets>Shader</Targets>
		</AvailableItemName>
	</ItemGroup>
	<UsingTask
		TaskName="GetShaderBuilderOutputs"
		TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
		<ParameterGroup>
			<RootDirectory ParameterType="System.String" Required="true"/>
			<OutputDirectory ParameterType="System.String" Required="true"/>
			<EntryNames ParameterType="System.String[]"/>
			<Input ParameterType="System.String" Required="true"/>
			<Outputs ParameterType="System.String[]" Output="true"/>
		</ParameterGroup>
		<Task>
			<Reference Include="System.Xml"/>
			<Reference Include="System.Windows.Forms"/>
			<Using Namespace="System"/>
			<Using Namespace="System.IO"/>
			<Using Namespace="System.Windows.Forms"/>
			<Code Type="Fragment" Language="cs">
<![CDATA[
var inputPath = Path.GetFullPath(Input);

if (!File.Exists(inputPath))
{
	Log.LogError(string.Format("The input file ({0}) does not exist.", inputPath));
	return false;
}

var outputPaths = new List<string>();
if (EntryNames != null)
{
	foreach (var entryName in EntryNames)
	{
		var basePath = Path.GetFullPath(Path.Combine(OutputDirectory, entryName));
		outputPaths.Add(basePath + ".obj");
		MessageBox.Show(basePath + ".obj");
	}
}

Outputs = outputPaths.ToArray();
]]>
			</Code>
		</Task>
	</UsingTask>
	<UsingTask
		TaskName="ShaderBuilder"
		TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
		<ParameterGroup>
			<RootDirectory ParameterType="System.String" Required="true"/>
			<OutputDirectory ParameterType="System.String" Required="true"/>
			<VSEntryNames ParameterType="System.String[]"/>
			<PSEntryNames ParameterType="System.String[]"/>
			<HSEntryNames ParameterType="System.String[]"/>
			<DSEntryNames ParameterType="System.String[]"/>
			<GSEntryNames ParameterType="System.String[]"/>
			<CSEntryNames ParameterType="System.String[]"/>
			<OptimizationLevel ParameterType="System.String"/>
			<EnableDebugInformation ParameterType="System.String"/>
			<ShaderModel ParameterType="System.String"/>
			<Namespace ParameterType="System.String"/>
			<Input ParameterType="System.String" Required="true"/>
			<Outputs ParameterType="System.String[]" Output="true"/>
		</ParameterGroup>
		<Task>
			<Reference Include="System.Xml"/>
			<Reference Include="System.Windows.Forms"/>
			<Using Namespace="System"/>
			<Using Namespace="System.IO"/>
			<Using Namespace="System.Windows.Forms"/>
			<Using Namespace="System.Diagnostics"/>
			<Code Type="Fragment" Language="cs">
<![CDATA[
var inputPath = Path.GetFullPath(Input);
var shaderBuilderPath = Path.GetFullPath(Path.Combine(RootDirectory, "Tool/ShaderBuilder/ShaderBuilder.exe"));
var bin2ObjPath = Path.GetFullPath(Path.Combine(RootDirectory, "Tool/Bin2Obj/Bin2Obj.exe"));

if (!File.Exists(inputPath))
{
	Log.LogError(string.Format("The input file ({0}) does not exist.", inputPath));
	return false;
}

// Add stage and entry name to list.
var stageAndEntryNames = new List<KeyValuePair<string, string>>();
{
	if (VSEntryNames != null)
	{
		foreach (var vsEntryName in VSEntryNames)
		{
			stageAndEntryNames.Add(new KeyValuePair<string, string>("vs", vsEntryName));
		}
	}
	if (PSEntryNames != null)
	{
		foreach (var psEntryName in PSEntryNames)
		{
			stageAndEntryNames.Add(new KeyValuePair<string, string>("ps", psEntryName));
		}
	}
	if (HSEntryNames != null)
	{
		foreach (var hsEntryName in HSEntryNames)
		{
			stageAndEntryNames.Add(new KeyValuePair<string, string>("hs", hsEntryName));
		}
	}
	if (DSEntryNames != null)
	{
		foreach (var dsEntryName in DSEntryNames)
		{
			stageAndEntryNames.Add(new KeyValuePair<string, string>("ds", dsEntryName));
		}
	}
	if (GSEntryNames != null)
	{
		foreach (var gsEntryName in GSEntryNames)
		{
			stageAndEntryNames.Add(new KeyValuePair<string, string>("gs", gsEntryName));
		}
	}
	if (CSEntryNames != null)
	{
		foreach (var csEntryName in CSEntryNames)
		{
			stageAndEntryNames.Add(new KeyValuePair<string, string>("cs", csEntryName));
		}
	}
}

// Get dependencies and check whether recompile.
bool needsRecompile = false;
{
	string meta = Path.GetFullPath(OutputDirectory + ".meta");
	if (!File.Exists(meta))
	{
		needsRecompile = true;
		var directory = Path.GetFullPath(Path.GetDirectoryName(OutputDirectory));
		if (!Directory.Exists(directory))
		{
			Directory.CreateDirectory(directory);
		}
		File.WriteAllText(meta, DateTime.MinValue.ToString());
	}
	var lastDateTime = DateTime.Parse(File.ReadAllText(meta));
	lastDateTime = new DateTime
	(
		lastDateTime.Year,
		lastDateTime.Month,
		lastDateTime.Day,
		lastDateTime.Hour,
		lastDateTime.Minute,
		lastDateTime.Second
	);
	var inputFileDateTime = File.GetLastWriteTime(inputPath);
	inputFileDateTime = new DateTime
	(
		inputFileDateTime.Year,
		inputFileDateTime.Month,
		inputFileDateTime.Day,
		inputFileDateTime.Hour,
		inputFileDateTime.Minute,
		inputFileDateTime.Second
	);
	if (inputFileDateTime > lastDateTime)
	{
		File.WriteAllText(meta, inputFileDateTime.ToString());
		lastDateTime = inputFileDateTime;
		needsRecompile = true;
	}
	foreach (var stageAndEntryName in stageAndEntryNames)
	{
		var entryName = stageAndEntryName.Value;
		var outputPath = Path.GetFullPath(Path.Combine(OutputDirectory, entryName + ".obj"));
		if (!File.Exists(outputPath))
		{
			needsRecompile = true;
			break;
		}
	}
}

if (!needsRecompile)
{
	return true;
}

// Output input file.
{
	Log.LogMessage(MessageImportance.High, inputPath);
}

// ShaderBuilder
var csoOutputList = new List<string>();
{
	foreach (var stageAndEntryName in stageAndEntryNames)
	{
		var stage = stageAndEntryName.Key;
		var entryName = stageAndEntryName.Value;
		var arguments = string.Empty;
		arguments += string.Format("--output-directory=\"{0}\" ", OutputDirectory);
		arguments += string.Format("--{0}-entry-name={1} ", stage, entryName);
		arguments += string.Format("--shader-model={0} ", ShaderModel);
		arguments += string.Format("\"{0}\"", inputPath);
		int shaderCompilerExitCode = 0;
		var shaderCompilerOutput = string.Empty;
		var shaderCompilerError = string.Empty;
		using (var shaderCompilerProcess = new Process())
		{
			shaderCompilerProcess.StartInfo.FileName = shaderBuilderPath;
			shaderCompilerProcess.StartInfo.Arguments = arguments;
			shaderCompilerProcess.StartInfo.UseShellExecute = false;
			shaderCompilerProcess.StartInfo.RedirectStandardOutput = true;
			shaderCompilerProcess.StartInfo.RedirectStandardError = true;
			shaderCompilerProcess.Start();
			shaderCompilerOutput = shaderCompilerProcess.StandardOutput.ReadLine();
			shaderCompilerError = shaderCompilerProcess.StandardError.ReadLine();
			shaderCompilerProcess.WaitForExit();
			shaderCompilerExitCode = shaderCompilerProcess.ExitCode;
		}
		if (shaderCompilerExitCode != 0)
		{
			Log.LogError(shaderCompilerError);
			return false;
		}
		var outputPath = Path.GetFullPath(Path.Combine(OutputDirectory, entryName + ".cso"));
		csoOutputList.Add(outputPath);
	}
}

// Bin2Obj
{
	foreach (var csoOutput in csoOutputList)
	{
		var arguments = string.Empty;
		arguments += string.Format("--output-directory=\"{0}\" ", OutputDirectory);
		arguments += string.Format("--variable-name={0} ", "stravaEngineShader" + Path.GetFileNameWithoutExtension(inputPath) + Path.GetFileNameWithoutExtension(csoOutput));
		if (!string.IsNullOrEmpty(Namespace))
		{
			arguments += string.Format("--namespace={0} ", Namespace);
		}
		arguments += string.Format("\"{0}\"", csoOutput);
		int bin2ObjExitCode = 0;
		var bin2ObjOutput = string.Empty;
		var bin2ObjError = string.Empty;
		using (var bin2ObjProcess = new Process())
		{
			bin2ObjProcess.StartInfo.FileName = bin2ObjPath;
			bin2ObjProcess.StartInfo.Arguments = arguments;
			bin2ObjProcess.StartInfo.UseShellExecute = false;
			bin2ObjProcess.StartInfo.RedirectStandardOutput = true;
			bin2ObjProcess.StartInfo.RedirectStandardError = true;
			bin2ObjProcess.Start();
			bin2ObjOutput = bin2ObjProcess.StandardOutput.ReadLine();
			bin2ObjError = bin2ObjProcess.StandardError.ReadLine();
			bin2ObjProcess.WaitForExit();
			bin2ObjExitCode = bin2ObjProcess.ExitCode;
		}
		if (bin2ObjExitCode != 0)
		{
			Log.LogError(bin2ObjError);
			return false;
		}
	}
}

Outputs = csoOutputList.ToArray();
]]>
			</Code>
		</Task>
	</UsingTask>
	<Target
		Name				= "Shader"
		BeforeTargets		= "ClCompile"
		Condition			= "'@(ShaderBuilder)' != ''"
		DependsOnTargets	= "$(ShaderBuilderDependsOn)">
		<ItemGroup Condition="'@(SelectedFiles)' != ''">
			<ShaderBuilder
				Remove="@(ShaderBuilder)"
				Condition="'%(Identity)' != '@(SelectedFiles)'" />
		</ItemGroup>
		<ShaderBuilder
			Condition				="'@(ShaderBuilder)' != '' and '%(ShaderBuilder.ExcludedFromBuild)' != 'true'"
			RootDirectory			= "$(SolutionDir)..\"
			OutputDirectory			= "$(IntDir)%(Identity)\..\%(Filename)"
			VSEntryNames			= "%(ShaderBuilder.VSEntryNames)"
			PSEntryNames			= "%(ShaderBuilder.PSEntryNames)"
			HSEntryNames			= "%(ShaderBuilder.HSEntryNames)"
			DSEntryNames			= "%(ShaderBuilder.DSEntryNames)"
			GSEntryNames			= "%(ShaderBuilder.GSEntryNames)"
			CSEntryNames			= "%(ShaderBuilder.CSEntryNames)"
			OptimizationLevel		= "%(ShaderBuilder.OptimizationLevel)"
			EnableDebugInformation	= "%(ShaderBuilder.EnableDebugInformation)"
			ShaderModel				= "%(ShaderBuilder.ShaderModel)"
			Namespace				= "$([System.IO.Path]::GetDirectoryName('%(Identity)'))"
			Input					= "%(FullPath)"/>
	</Target>
	<PropertyGroup>
		<ComputeLinkInputsTargets>$(ComputeLinkInputsTargets);ComputeShaderBuilderOutput;</ComputeLinkInputsTargets>
		<ComputeLibInputsTargets>$(ComputeLibInputsTargets);ComputeShaderBuilderOutput;</ComputeLibInputsTargets>
	</PropertyGroup>
	<Target
		Name="ComputeShaderBuilderOutput"
		Condition="'@(ShaderBuilder)' != ''">
		<ItemGroup>
			<ShaderBuilderOutputs
				Condition="'@(ShaderBuilder)' != '' and '%(ShaderBuilder.ExcludedFromBuild)' != 'true'"
				Include="$([MSBuild]::NormalizePath('%(ShaderBuilder.OutputDirectory)'))\*.obj" />
			<Link Include="%(ShaderBuilderOutputs.Identity)" />
			<Lib Include="%(ShaderBuilderOutputs.Identity)" />
			<ImpLib Include="%(ShaderBuilderOutputs.Identity)" />
		</ItemGroup>
	</Target>
</Project>