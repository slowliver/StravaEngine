#pragma once

#include <dxgi.h>
#include <d3d12.h>

#include <Engine/Core/CoreMinimal.h>
#include <Engine/Graphics/Type.h>

namespace StravaEngine::Graphics::D3D12::Translator
{
namespace ToDXGI
{
STRAVA_FORCE_INLINE DXGI_FORMAT ToFormat(Format in)
{
	static constexpr DXGI_FORMAT k_dxgiFormatTable[] =
	{
		// Unknown
		DXGI_FORMAT_UNKNOWN,

		// Color 8bis
		DXGI_FORMAT_R8_TYPELESS,
		DXGI_FORMAT_R8_UNORM,
		DXGI_FORMAT_R8_SNORM,
		DXGI_FORMAT_R8_UINT,
		DXGI_FORMAT_R8_SINT,

		// Color 16bits
		DXGI_FORMAT_R16_TYPELESS,
		DXGI_FORMAT_R16_FLOAT,
		DXGI_FORMAT_R16_UNORM,
		DXGI_FORMAT_R16_SNORM,
		DXGI_FORMAT_R16_UINT,
		DXGI_FORMAT_R16_SINT,
		DXGI_FORMAT_R8G8_TYPELESS,
		DXGI_FORMAT_R8G8_UNORM,
		DXGI_FORMAT_R8G8_SNORM,
		DXGI_FORMAT_R8G8_UINT,
		DXGI_FORMAT_R8G8_SINT,
		DXGI_FORMAT_R9G9B9E5_SHAREDEXP,

		// Special Color 16bits
		DXGI_FORMAT_B5G6R5_UNORM,
		DXGI_FORMAT_B5G5R5A1_UNORM,
		DXGI_FORMAT_B4G4R4A4_UNORM,

		// Depth 16bits
		DXGI_FORMAT_D16_UNORM,

		// Color 32bits
		DXGI_FORMAT_R32_TYPELESS,
		DXGI_FORMAT_R32_FLOAT,
		DXGI_FORMAT_R32_UINT,
		DXGI_FORMAT_R32_SINT,
		DXGI_FORMAT_R24G8_TYPELESS,
		DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
		DXGI_FORMAT_X24_TYPELESS_G8_UINT,
		DXGI_FORMAT_R16G16_TYPELESS,
		DXGI_FORMAT_R16G16_FLOAT,
		DXGI_FORMAT_R16G16_UNORM,
		DXGI_FORMAT_R16G16_SNORM,
		DXGI_FORMAT_R16G16_UINT,
		DXGI_FORMAT_R16G16_SINT,
		DXGI_FORMAT_R11G11B10_FLOAT,
		DXGI_FORMAT_R10G10B10A2_TYPELESS,
		DXGI_FORMAT_R10G10B10A2_UNORM,
		DXGI_FORMAT_R10G10B10A2_UINT,
		DXGI_FORMAT_R8G8B8A8_TYPELESS,
		DXGI_FORMAT_R8G8B8A8_UNORM,
		DXGI_FORMAT_R8G8B8A8_SNORM,
		DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
		DXGI_FORMAT_R8G8B8A8_UINT,
		DXGI_FORMAT_R8G8B8A8_SINT,

		// Special Color 32bits
		DXGI_FORMAT_B8G8R8A8_TYPELESS,
		DXGI_FORMAT_B8G8R8A8_UNORM,
		DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
		DXGI_FORMAT_B8G8R8X8_TYPELESS,
		DXGI_FORMAT_B8G8R8X8_UNORM,
		DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
		DXGI_FORMAT_R8G8_B8G8_UNORM,
		DXGI_FORMAT_G8R8_G8B8_UNORM,

		// Depth 32bits
		DXGI_FORMAT_D32_FLOAT,
		DXGI_FORMAT_D24_UNORM_S8_UINT,

		// Color 64bits
		DXGI_FORMAT_R32G32_TYPELESS,
		DXGI_FORMAT_R32G32_FLOAT,
		DXGI_FORMAT_R32G32_UINT,
		DXGI_FORMAT_R32G32_SINT,
		DXGI_FORMAT_R32G8X24_TYPELESS,
		DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
		DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
		DXGI_FORMAT_R16G16B16A16_TYPELESS,
		DXGI_FORMAT_R16G16B16A16_FLOAT,
		DXGI_FORMAT_R16G16B16A16_UNORM,
		DXGI_FORMAT_R16G16B16A16_SNORM,
		DXGI_FORMAT_R16G16B16A16_UINT,
		DXGI_FORMAT_R16G16B16A16_SINT,

		// Depth 64bits
		DXGI_FORMAT_D32_FLOAT_S8X24_UINT,

		// Color 96bits
		DXGI_FORMAT_R32G32B32_TYPELESS,
		DXGI_FORMAT_R32G32B32_FLOAT,
		DXGI_FORMAT_R32G32B32_UINT,
		DXGI_FORMAT_R32G32B32_SINT,

		// Color 128bits
		DXGI_FORMAT_R32G32B32A32_TYPELESS,
		DXGI_FORMAT_R32G32B32A32_FLOAT,
		DXGI_FORMAT_R32G32B32A32_UINT,
		DXGI_FORMAT_R32G32B32A32_SINT,

		// Block Compression BC1
		DXGI_FORMAT_BC1_TYPELESS,
		DXGI_FORMAT_BC1_UNORM,
		DXGI_FORMAT_BC1_UNORM_SRGB,

		// Block Compression BC2
		DXGI_FORMAT_BC2_TYPELESS,
		DXGI_FORMAT_BC2_UNORM,
		DXGI_FORMAT_BC2_UNORM_SRGB,

		// Block Compression BC3
		DXGI_FORMAT_BC3_TYPELESS,
		DXGI_FORMAT_BC3_UNORM,
		DXGI_FORMAT_BC3_UNORM_SRGB,

		// Block Compression BC4
		DXGI_FORMAT_BC4_TYPELESS,
		DXGI_FORMAT_BC4_UNORM,
		DXGI_FORMAT_BC4_SNORM,

		// Block Compression BC5
		DXGI_FORMAT_BC5_TYPELESS,
		DXGI_FORMAT_BC5_UNORM,
		DXGI_FORMAT_BC5_SNORM,

		// Block Compression BC6(H)
		DXGI_FORMAT_BC6H_TYPELESS,
		DXGI_FORMAT_BC6H_UF16,
		DXGI_FORMAT_BC6H_SF16,

		// Block Compression BC7
		DXGI_FORMAT_BC7_TYPELESS,
		DXGI_FORMAT_BC7_UNORM,
		DXGI_FORMAT_BC7_UNORM_SRGB,
	};
	static_assert(Core::ToUnderlying(Format::Count) == Core::GetCount(k_dxgiFormatTable));
	return k_dxgiFormatTable[Core::ToUnderlying(in)];
}
}

namespace ToD3D12
{
STRAVA_FORCE_INLINE D3D12_PRIMITIVE_TOPOLOGY ToPrimitiveTopology(const PrimitiveTopology& in)
{
	D3D12_PRIMITIVE_TOPOLOGY out;
	switch (in)
	{
	case PrimitiveTopology::PointList:
		out = D3D_PRIMITIVE_TOPOLOGY_POINTLIST;
		break;
	case PrimitiveTopology::LineList:
		out = D3D_PRIMITIVE_TOPOLOGY_LINELIST;
		break;
	case PrimitiveTopology::LineStrip:
		out = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP;
		break;
	case PrimitiveTopology::TriangleList:
		out = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
		break;
	case PrimitiveTopology::TriangleStrip:
		out = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP;
		break;
	default:
		STRAVA_ASSERT("Not translatable!");
		out = D3D_PRIMITIVE_TOPOLOGY_UNDEFINED;
		break;
	}
	return out;
}

STRAVA_FORCE_INLINE D3D12_PRIMITIVE_TOPOLOGY_TYPE ToPrimitiveTopologyType(const PrimitiveTopology& in)
{
	D3D12_PRIMITIVE_TOPOLOGY_TYPE out;
	switch (in)
	{
	case PrimitiveTopology::PointList:
		out = D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT;
		break;
	case PrimitiveTopology::LineList:
		out = D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE;
		break;
	case PrimitiveTopology::LineStrip:
	case PrimitiveTopology::TriangleList:
	case PrimitiveTopology::TriangleStrip:
		out = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
		break;
	default:
		STRAVA_ASSERT("Not translatable!");
		out = D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED;
		break;
	}
	return out;
}

STRAVA_FORCE_INLINE D3D12_RECT ToRect(const Core::Int32Rect& in)
{
	D3D12_RECT out = CD3DX12_RECT
	(
		in.m_left,
		in.m_top,
		in.m_right,
		in.m_bottom
	);
	return out;
}

STRAVA_FORCE_INLINE D3D12_RESOURCE_DIMENSION ToResourceDimension(const TextureDimension& in)
{
	D3D12_RESOURCE_DIMENSION out;
	switch (in)
	{
	case TextureDimension::k1D:
		out = D3D12_RESOURCE_DIMENSION_TEXTURE1D;
		break;
	case TextureDimension::k2D:
		out = D3D12_RESOURCE_DIMENSION_TEXTURE2D;
		break;
	case TextureDimension::k3D:
		out = D3D12_RESOURCE_DIMENSION_TEXTURE3D;
		break;
	default:
		out = D3D12_RESOURCE_DIMENSION_UNKNOWN;
		break;
	}
	return out;
}

STRAVA_FORCE_INLINE D3D12_VIEWPORT ToViewport(const Viewport& in)
{
	D3D12_VIEWPORT out = CD3DX12_VIEWPORT
	(
		in.m_left,
		in.m_top,
		in.m_left + in.m_width,
		in.m_top + in.m_height,
		in.m_minDepth,
		in.m_maxDepth
	);
	return out;
}
}
}
